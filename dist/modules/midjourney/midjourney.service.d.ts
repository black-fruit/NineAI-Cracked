import { UserEntity } from './../user/user.entity';
import { MidjourneyEntity } from './midjourney.entity';
import { Repository } from 'typeorm';
import { GlobalConfigService } from '../globalConfig/globalConfig.service';
import { MidjourneyStatusEnum } from '@/common/constants/midjourney.constant';
import { UploadService } from '../upload/upload.service';
import { BadwordsService } from '../badwords/badwords.service';
import { Request } from 'express';
import { UserBalanceService } from '../userBalance/userBalance.service';
import { GetListDto } from './dto/getList.dto';
import { RedisCacheService } from '../redisCache/redisCache.service';
export declare class MidjourneyService {
    private readonly midjourneyEntity;
    private readonly userEntity;
    private readonly globalConfigService;
    private readonly uploadService;
    private readonly badwordsService;
    private readonly userBalanceService;
    private redisCacheService;
    constructor(midjourneyEntity: Repository<MidjourneyEntity>, userEntity: Repository<UserEntity>, globalConfigService: GlobalConfigService, uploadService: UploadService, badwordsService: BadwordsService, userBalanceService: UserBalanceService, redisCacheService: RedisCacheService);
    private lockPrompt;
    sleep(time: any): Promise<unknown>;
    draw(jobData: any, jobId: any): Promise<boolean>;
    addDrawQueue(params: any): Promise<{
        userId: any;
        extraParam: any;
        prompt: any;
        imgUrl: any;
        fullPrompt: string;
        randomDrawId: any;
        status: MidjourneyStatusEnum;
        action: any;
        orderId: any;
        custom_id: any;
        message_id: any;
    } & MidjourneyEntity>;
    updateDrawStatus(id: any, status: any): Promise<void>;
    updateDrawData(jobData: any, drawRes: any): Promise<void>;
    getHistroyMessageIds(randomDrawId: any): Promise<any[]>;
    sendDrawCommand(drawInfo: any, jobData: any): Promise<boolean>;
    sendSmInteractions(params: any, jobData: any): Promise<void>;
    sendReGenerateInteractions(params: any, jobData: any): Promise<void>;
    sendVaryInteractions(params: any, jobData: any): Promise<void>;
    sendZoomInteractions(params: any, jobData: any): Promise<void>;
    pollComparisonResultDraw(drawInfo: any): Promise<any>;
    pollComparisonResultUpscale(drawInfo: any): Promise<any>;
    pollComparisonResultReGenerate(drawInfo: any): Promise<any>;
    pollComparisonResultVary(drawInfo: any): Promise<any>;
    pollComparisonResultZoom(drawInfo: any): Promise<any>;
    pollComparisonResultVariation(drawInfo: any): Promise<any>;
    findCurrentEnlargeImgResult(randomDrawId: any, orderId: any): Promise<any>;
    findCurrentVariationImgResult(randomDrawId: any): Promise<any>;
    findCurrentReGenerateImgResult(randomDrawId: any, message_id: any): Promise<any>;
    findCurrentZoomImgResult(randomDrawId: any, message_id: any): Promise<any>;
    findCurrentVaryImgResult(randomDrawId: any, message_id: any): Promise<any>;
    extractContent(str: string): {
        prompt: string;
        order: number;
    } | null;
    findCurrentPromptResult(randomDrawId: any): Promise<any>;
    isVariationsImage(str: any): boolean;
    isSingleImage(str: any): boolean;
    isReGenerateImage(str: any): boolean;
    isVaryImage(str: any): boolean;
    isZoomImage(str: any): boolean;
    getMjDefaultParams(): Promise<{
        application_id: any;
        guild_id: any;
        channel_id: any;
        session_id: any;
        version: any;
        id: any;
        authorization: any;
        mjRateLimit: any;
        mjProxy: any;
    }>;
    getMessageList(): Promise<any>;
    parseProgress(content: any): number;
    removeEmoji(str: any): any;
    bindJobId(id: any, jobId: any): Promise<void>;
    getDrawList(req: Request, params: any): Promise<any>;
    formatFileInfo(fileInfo: any): any;
    getDrawActionDetail(action: any, drawId: any, orderId: any): Promise<{
        custom_id: any;
        message_id: string;
        prompt: string;
        imgUrl: string;
        extraParam: string;
        randomDrawId: string;
    }>;
    checkIsUpscale(custom_id: any): Promise<void>;
    deleteDraw(id: number, req: Request): Promise<string>;
    checkLimit(req: Request): Promise<void>;
    drawFailed(jobData: any): Promise<void>;
    getList(params: GetListDto): Promise<any>;
    getAdminDrawList(req: Request, params: GetListDto): Promise<{
        rows: MidjourneyEntity[];
        count: number;
    }>;
    recDraw(params: any): Promise<string>;
    cleanQueue(): Promise<void>;
    delLog(req: Request, body: any): Promise<string>;
}
